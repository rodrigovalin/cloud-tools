// Code generated by go-bindata.
// sources:
// assets/min_max_versions.yaml
// assets/ops_manager_host_support.yaml
// assets/readme.md
// assets/winvc_versions.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMin_max_versionsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xd3\xbf\x6e\x83\x30\x10\x06\xf0\x9d\xa7\xf8\x44\x66\x10\x26\xfc\x57\xd5\xa1\xea\x1a\x75\xa8\xd4\xdd\x69\x9c\x04\x35\xd8\x08\x43\x94\xe6\xe9\xab\x04\xa5\xe2\x0e\x82\xda\x8c\x9c\xee\x87\xcf\x9f\xed\x05\x56\xa5\x5e\xc9\x13\x3e\x54\x63\x4b\xa3\x2d\x36\x6a\x5b\x6a\x85\x76\xaf\x60\xbb\xba\x36\x4d\xab\x36\x78\x7b\xc7\xb1\x6f\xc0\xd6\x34\x90\xd8\x95\x47\xa5\x9d\x05\x56\x46\xef\xcc\xeb\x0b\x6a\xf9\xf9\x25\x77\xca\x71\x3c\xcf\x73\xb6\x07\x79\x34\x8d\x2d\x1c\xc0\x83\x96\x95\x2a\xd0\xec\xd5\xc1\x01\x00\x63\x6f\x2b\x15\xd7\xef\x61\x43\x2a\xae\x25\xa0\x2a\x75\x01\x37\xf5\x03\xf7\x56\x90\xa7\x02\x6e\x76\x2b\x10\x14\x3c\x80\x92\x94\xa0\xc4\x0f\x29\x4a\x27\x51\xf8\x00\x8a\xe9\x4a\xb1\x9f\x52\x94\x4c\xa2\x98\xa1\x78\x02\x0d\xd2\xb5\x9d\x55\xb3\xe9\x5e\x1a\x04\x1d\x5f\xb0\xe9\xc5\xd2\x1d\x13\x7a\x20\x42\x30\x12\x92\x29\xba\x75\xa7\xdb\x6e\x76\x8e\xbe\x45\x64\x41\x44\x7f\x9c\xf9\x41\xc4\xfe\x9d\xff\x96\x18\x4e\x38\x4e\xc6\x38\xbd\x87\x23\x8e\xa3\x31\x8e\xef\xe1\x90\xe3\x70\x8c\x97\xd7\xd2\x20\x95\x8d\x5a\x97\x52\xcf\xa6\xd2\xb7\xe4\xf4\x7c\x72\x9f\xa7\x1d\xf0\xab\xd2\xbb\x8c\x1e\x52\xc6\x5d\x3e\xcd\x46\x8f\x4d\x4c\xbc\x9b\xc1\x3e\x64\x25\xcf\x66\x7e\x1f\x7d\x0b\xdd\x06\xbb\x65\x4f\xaa\xaa\xdb\xef\x67\x77\xc2\x51\x16\x5c\x92\x5c\xfe\x09\x9f\x75\x12\xfd\x03\xff\x04\x00\x00\xff\xff\x72\x03\xcd\x69\xf3\x04\x00\x00")

func assetsMin_max_versionsYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsMin_max_versionsYaml,
		"assets/min_max_versions.yaml",
	)
}

func assetsMin_max_versionsYaml() (*asset, error) {
	bytes, err := assetsMin_max_versionsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/min_max_versions.yaml", size: 1267, mode: os.FileMode(436), modTime: time.Unix(1547824088, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsOps_manager_host_supportYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x94\xcf\x6e\x9b\x40\x10\xc6\xef\xfb\x14\x23\x7c\xab\x0c\x02\x8c\xb1\xc3\x13\xf4\xd0\x2a\x95\x52\xb5\x87\x2a\xaa\xc6\x30\x86\x55\x61\x17\xed\x2c\xb6\x93\xa7\xaf\xd8\x82\x4a\x5d\x19\xa5\x6a\xa2\x56\x72\x2e\xb3\x7f\xd8\xf9\x7d\x33\xd2\x37\x2c\xc4\x02\x3e\x56\x92\xe1\x01\x9b\x1a\xf6\xb2\x26\x28\x88\x73\x23\x77\xc4\x60\x2b\x02\xee\xda\x56\x1b\x4b\x05\xbc\xd5\x6c\xe1\xb6\x25\x83\x56\xaa\x12\xee\x1e\xd8\x52\xd3\x3f\xc2\xfe\x9a\xe1\x3d\x2a\x2c\xc9\x40\x8e\x0a\x8e\xda\x7c\x83\xa3\xb4\x55\x30\xf2\x25\x2f\x1d\xef\xf6\x6e\x09\x07\x32\x2c\xb5\x62\x40\x55\xc0\xbe\xc6\x83\x36\x17\x38\x52\xb1\xc5\xba\x86\x46\xab\x52\x17\x70\x90\xe8\x20\xd8\x59\xdd\xa0\x95\x5a\x01\x96\xa4\x6c\x20\x16\x42\xf8\xbe\x2f\x74\xcb\x43\xfa\xa7\x1f\x1a\x99\xf0\x47\xb9\x0c\x92\x20\x14\xf0\xb3\xa3\x0f\x35\xda\xbd\x36\x0d\x67\x02\xc0\x87\x76\x38\x66\xf0\x4e\xaa\xee\x24\x00\x60\x2c\x2e\x73\x07\x1f\x14\x36\x94\x41\xb7\xeb\x94\xed\xdc\xd5\x84\x36\x08\x72\x06\x5f\xbc\x28\x0e\x13\x6f\x09\x5e\x94\x0c\x6b\x3a\xac\xdb\x30\xf1\xee\x87\x4c\x34\x79\xd5\x3f\x3e\x6d\xd3\xaf\xa9\xfb\xdc\xb6\x79\x9a\xd4\xe4\xdd\x8b\x5f\xf4\x0a\xda\x49\x54\x73\x7a\x9b\xa8\x4f\xdf\xba\x78\x13\x5f\x52\x38\xc3\x72\xc7\x34\xdb\x84\xc3\x45\x4f\xc5\x61\x83\x8f\x7a\xb6\xca\xb8\xe7\xc5\x61\xb4\x0a\xc2\xd5\x1f\x41\xe3\x67\xa7\x3e\xaa\x34\x79\x66\xa8\xa9\xa8\x9e\x43\xae\xd7\x3d\x73\xbd\xe9\x63\xea\xf8\xa9\xdb\x6f\x42\x17\xa3\xdf\x64\x46\x37\x2c\xc1\xe3\xd5\x4d\x78\xea\x37\x53\xe9\xa9\x63\x3f\x4b\x55\xe8\x23\x5f\xf6\x6c\x49\x8a\x8c\xcc\xe7\x0a\x7c\x73\x56\xc1\x59\xa7\x53\x39\xcd\x33\xe3\xf1\xb7\x52\x93\x81\x5d\x05\xe9\x3f\x1c\xd8\xeb\x1d\xd4\x17\x36\xfe\x53\x2c\x7f\x75\x4e\x4f\xfe\x3f\xa7\xbf\xda\xfb\x25\xfe\xeb\x57\xe0\xec\xef\x01\x00\x00\xff\xff\x45\x1d\xa9\x9c\x56\x0a\x00\x00")

func assetsOps_manager_host_supportYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsOps_manager_host_supportYaml,
		"assets/ops_manager_host_support.yaml",
	)
}

func assetsOps_manager_host_supportYaml() (*asset, error) {
	bytes, err := assetsOps_manager_host_supportYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/ops_manager_host_support.yaml", size: 2646, mode: os.FileMode(436), modTime: time.Unix(1548008463, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\x31\x6f\xe3\x38\x10\x85\x7b\xfe\x8a\x41\x52\x24\x31\x04\xc1\x41\x82\xc3\xdd\x75\x57\xdc\x55\x39\xb8\xc8\x62\x37\x9d\x35\x32\x47\xd1\x6c\xa8\xa1\xc0\x21\x2d\xfb\xdf\x2f\x48\x49\x76\x02\x6c\x29\x69\xe6\xe3\xe3\x7b\x4f\xb7\x30\xb0\xec\x07\x3c\xed\x8f\x14\x94\xbd\x68\x7d\xc6\xc1\xc1\xad\x31\xdf\x7a\x56\x60\x05\x04\x4b\x1d\x0b\x47\xf6\x02\xbe\xcb\x0b\x3b\xfd\x3e\x4f\x03\x8a\x85\x01\x4f\xd7\x17\xb1\xc7\x08\x13\x3b\x07\x2d\x99\xa4\x64\x21\x7a\x18\x83\xb7\xe9\x40\x10\x7b\x02\x92\x18\x98\x14\x3a\x1f\xca\xb3\xd0\x04\x6d\x62\x67\x15\xba\xe0\x87\xf2\xae\x4b\xce\xd5\x3f\xd5\x8b\xb9\x57\x0a\x47\x0a\x77\x0a\x8b\x3e\x18\x50\xb8\x23\x8d\x0f\xb5\x31\xff\xe2\xa1\x2f\xc0\x33\xb0\x94\xcd\xa6\x73\x78\xf4\x41\x1b\x70\xac\x71\x96\xff\xc2\x92\x4e\x70\x33\x7f\xb9\xa9\x8a\xe6\x7c\x3a\xe5\x6d\x2f\x64\x7c\x57\x76\x57\x07\x2a\x40\x68\x06\x96\xa6\x4c\x36\x03\x9e\x9a\x0c\x2a\x2e\x90\xad\x8d\x79\xa1\x78\xa7\x80\xaa\x69\x20\xc0\x72\x83\xc6\x52\xcb\x28\xcd\x45\xe6\xe3\x16\x26\x54\x08\xe4\x08\x95\x6c\x95\x4f\x90\x65\xb8\x28\x36\xab\x62\xbf\x7a\xb7\x8a\x5e\xe4\x34\x82\x03\xfd\x0d\x2b\x78\x96\x0f\xda\xfb\xe4\x6c\x36\x97\x24\x52\x28\x7a\x4a\x52\x1d\x3b\x82\x9e\xdc\xa8\x30\x71\xec\x0b\x62\xb3\x89\x01\x45\x3b\x1f\x06\xcc\xf1\x6d\x36\x57\x8f\xd5\xa7\x90\x23\xf1\xc6\x92\x46\x96\x32\x50\x28\xb5\x31\xb7\xe0\x47\xdd\x0f\x28\xf8\x4e\x61\xdf\x7b\x8d\x7b\x4d\xe3\xe8\x43\xfc\x5a\x8f\x72\xa8\x25\x3d\x04\x6e\x49\x0b\xd7\x72\xd7\x51\x20\x89\xb0\x1b\x15\xfe\x9f\x11\x17\x6f\x97\x7e\x90\x59\x70\x15\x1c\x52\xc8\xd3\xee\x0c\xcf\xf5\xb6\x38\xfe\x54\xff\x51\xc3\x7f\x6b\x40\xab\xa1\x13\x41\x8f\xc7\x4f\x7c\x33\x3a\x8c\xf9\x6a\x0a\xf7\x25\xe2\x0a\x7e\xb0\x58\x3f\x69\xa1\xec\x5e\xdf\x72\x45\x32\x47\xfc\x94\xd7\xd7\xc0\x9c\x2b\x42\x77\xaf\x6f\x65\x70\x5d\x5a\x4a\xb8\x74\x17\x58\x0e\x2e\xd9\xe2\xef\x6e\x4e\xca\xc7\x9e\x02\xf4\x28\xb6\xba\xf6\x67\x2e\x57\xd9\xad\x80\xe3\xb5\xa7\x42\x64\x35\x97\xbf\xbd\x5c\x96\x2c\xdc\xaf\xd8\x4b\x61\x2f\xdf\xbe\xb6\xe0\xa1\x68\xe3\xa8\x06\xc3\xa1\xe7\x48\x87\x98\x02\x7d\xa6\xc2\x95\x8a\x0a\x13\x39\xf7\x1b\x7a\x5e\x6e\x4c\x01\xd6\xc6\xfc\x03\xef\xde\x5b\xa0\x13\x0e\xa3\xa3\x5c\xb4\xde\x4f\x10\x2f\x49\x4e\x3e\x7c\x94\x7f\xbe\x3d\x83\xf3\xfe\x83\xe5\x1d\x30\x16\x52\x06\xcd\xe9\x19\x0c\x04\x5e\xdc\xf9\x93\x00\x96\x9c\x5e\x05\x8e\x3f\xf2\x95\x9e\xfe\xda\x9e\x1a\x58\x7e\xf0\x26\xb5\x49\x62\x7a\xfc\x73\xfb\xdc\x2c\x26\x9b\xb2\x8e\x47\x64\x87\xad\xcb\x5e\x7f\x29\xcb\x73\xbd\x35\xbf\x02\x00\x00\xff\xff\xea\xe6\x49\xc6\x99\x04\x00\x00")

func assetsReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_assetsReadmeMd,
		"assets/readme.md",
	)
}

func assetsReadmeMd() (*asset, error) {
	bytes, err := assetsReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/readme.md", size: 1177, mode: os.FileMode(436), modTime: time.Unix(1547743334, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsWinvc_versionsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcf\xdd\x6a\x83\x30\x18\xc6\xf1\x73\xaf\x22\x78\x38\x96\xbc\x6f\x3e\x8c\xd5\x33\x35\xe6\x26\x4a\x29\x45\x53\x26\xa8\xe9\x62\xea\x7a\xf9\xa3\xdb\x18\xac\x85\x6d\x3d\x7d\x78\x0e\xfe\xbf\xd5\x85\x65\xf0\xf3\x52\x26\x94\x9c\x82\x3b\x0e\x97\x92\x6c\x53\xc1\xd2\x5d\x42\xc8\x39\x8c\x25\x79\x89\xf1\x54\x02\xf4\xfe\x6d\x1e\xfd\xa1\x67\xd3\xd0\x05\xbf\xf8\x63\x64\x9d\x9f\xbe\x67\xe0\xa0\x21\x03\xae\x33\x91\x65\x6d\x4e\x39\x72\x45\x95\xc1\x8a\xd6\x58\x28\x5a\xeb\x4a\x49\xac\x74\x6d\x6d\x03\x6b\x17\x5c\x3f\x2c\x71\x7f\xd1\x8a\xb9\x8b\x4b\x08\xe9\xc7\xb1\x24\xd3\xb2\x76\x81\x23\xb2\x7e\x1c\x13\x42\xbe\xd2\x4a\xc2\x91\x21\x53\x28\x78\xc1\xa4\xc8\x12\x42\xfc\x29\x7e\x34\x93\x6d\x0a\xaf\xe9\x33\x49\x61\xf6\xc1\x2d\xf1\x10\x62\xba\x4b\x7e\x48\x24\xc3\xeb\x41\x32\xf1\xb0\x48\x40\x0b\x1a\x44\xab\x79\x63\x2b\x45\x8b\x42\xd6\x54\x19\xa3\x68\xc1\x4d\x45\x65\x2e\xf3\xc6\x64\x8d\xd1\xad\xfc\x43\x24\xee\x45\x82\x21\x13\x1c\x31\x63\xfc\xd6\x73\x1e\x5c\xfc\xdd\xf4\xf4\x30\x45\x83\x01\x0b\xda\x58\x69\x6d\xa1\xa8\xcd\x6d\x41\x95\xc5\x9a\x6e\xe4\xa6\xa1\x95\x14\x1b\xc3\xab\xdc\x60\xdb\xc2\xda\xed\x3f\x2d\xec\xc6\xb2\x76\xe1\x3c\xc7\x61\x72\x5c\xdd\x7b\xd4\xd5\xa3\xc4\xd5\xf5\x2f\xcf\x7b\x00\x00\x00\xff\xff\xa1\x85\xf4\x19\x77\x02\x00\x00")

func assetsWinvc_versionsYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsWinvc_versionsYaml,
		"assets/winvc_versions.yaml",
	)
}

func assetsWinvc_versionsYaml() (*asset, error) {
	bytes, err := assetsWinvc_versionsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/winvc_versions.yaml", size: 631, mode: os.FileMode(436), modTime: time.Unix(1547743334, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/min_max_versions.yaml": assetsMin_max_versionsYaml,
	"assets/ops_manager_host_support.yaml": assetsOps_manager_host_supportYaml,
	"assets/readme.md": assetsReadmeMd,
	"assets/winvc_versions.yaml": assetsWinvc_versionsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"min_max_versions.yaml": &bintree{assetsMin_max_versionsYaml, map[string]*bintree{}},
		"ops_manager_host_support.yaml": &bintree{assetsOps_manager_host_supportYaml, map[string]*bintree{}},
		"readme.md": &bintree{assetsReadmeMd, map[string]*bintree{}},
		"winvc_versions.yaml": &bintree{assetsWinvc_versionsYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

